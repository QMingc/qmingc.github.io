<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kafka源码剖析--副本迁移&amp;扩容</title>
    <link href="/2024/06/18/kafka-reassignment/"/>
    <url>/2024/06/18/kafka-reassignment/</url>
    
    <content type="html"><![CDATA[<p>基于Kafka 2.7.1版本：<a href="https://github.com/apache/kafka/tree/2.7.1">https://github.com/apache/kafka/tree/2.7.1</a><br>阅读过程考虑以下问题点：</p><ul><li>副本迁移过程中出现宕机或其他问题，是否影响迁移</li><li>当大量副本同时完成迁移，是否在同一时间进行选举，同时选举是否会发生问题</li><li>当拉取到副本不存在的offset会如何处理<br>kafka提供副本的重定义操作，通常在以下运维场景中用到：</li><li>副本分配不均匀，导致集群负载倾斜，使用副本重定义进行副本迁移</li><li>增加&amp;减少副本数量</li><li>broker删除或新增，需要进行副本迁移<br>此功能下文统称副本「迁移」</li></ul><h3 id="1-大致流程"><a href="#1-大致流程" class="headerlink" title="1.大致流程"></a>1.大致流程</h3><ul><li>1.通过AdminClient发送副本迁移请求</li><li>2.controller接收请求后，向所有副本（包括原有副本和新增加的副本）broker发送ApiKeys.LEADER_AND_ISR、ApiKeys.UPDATE_METADATA请求，并更新leader代数</li><li>3.副本broker接收ApiKeys.LEADER_AND_ISR请求后，加入AR副本，开启新副本同步线程</li><li>4.副本持续同步，向leader拉取数据，同步过程中，在Partition#updateFollowerFetchState方法判断是否可加入isr，若满足加入isr条件，将当前副本加入isr（修改zk节点状态）</li><li>5.controller接收到zk节点状态变化，开始处理后续的迁移工作：<ul><li>5.1.若当前leader已不是可用副本，重新选举leader，并向broker发送选举结果</li><li>5.2.向broker下线并删除不再需要的副本</li></ul></li><li>6.完成</li></ul><h3 id="2-代码细节"><a href="#2-代码细节" class="headerlink" title="2.代码细节"></a>2.代码细节</h3><h4 id="2-1副本迁移开始"><a href="#2-1副本迁移开始" class="headerlink" title="2.1副本迁移开始"></a>2.1副本迁移开始</h4><h5 id="创建迁移任务"><a href="#创建迁移任务" class="headerlink" title="创建迁移任务"></a>创建迁移任务</h5><p>   通过AdminClient#alterPartitionReassignments向controller发送副本迁移请求【推荐，另外还可通过往zk添加节点数据来触发controller副本迁移】</p><h5 id="controller接收请求"><a href="#controller接收请求" class="headerlink" title="controller接收请求"></a>controller接收请求</h5><p>   KafkaApi#handle负责处理所有网络请求，controller通过KafkaApi#handleAlterPartitionReassignmentsRequest处理「副本迁移」请求<br>   controller接收到请求后，发布副本迁移&amp;扩容异步事件（事件类型「ApiPartitionReassignment」），进行异步处理<br>   事件发布：KafkaController#alterPartitionReassignments<br>   事件处理：KafkaController#process<br>   <img src="/img/kafka-reassignment/controller-process.png" alt="img.png"></p><h5 id="controller异步处理逻辑"><a href="#controller异步处理逻辑" class="headerlink" title="controller异步处理逻辑"></a>controller异步处理逻辑</h5><p>   在KafkaController#processApiPartitionReassignment（图2-1）中开始处理逻辑，该方法中首先对迁移的副本进行一些有效性检查，过滤掉无效的副本broker id。<br>   在对迁移副本做完检查后，调用maybeTriggerPartitionReassignment（图2-2）和onPartitionReassignment（图2-3）方法来触发迁移。<br>   onPartitionReassignment是副本迁移中关键方法，方法的主体分为两部分：</p><ul><li>开始迁移：包含两个动作，首先更新所有副本（包括当前副本，和新增加或迁移的副本）的leader代数（不修改leader），并向副本发送ApiKeys.LEADER_AND_ISR和ApiKeys.UPDATE_METADATA请求，将新副本加入AR列表，其次将新加入AR列表的副本状态调整设为NewReplica（发送ApiKeys.LEADER_AND_ISR请求），自此，新副本接收ApiKeys.LEADER_AND_ISR后，开启副本同步线程（2.2中详细介绍）</li><li>迁移结束后的动作：在副本同步完成，并申请加入到了isr列表后，会触发迁移后的动作（2.3中详细介绍），主要包含以下动作：<ul><li>1.将新的副本上线，并首先将内存中旧的副本集换为新的副本集</li><li>2.判断leader所在副本是否还是可用副本，非可用则进行新的副本选举</li><li>3.停止并下线旧的副本</li><li>4.通知broker更新元数据<br><img src="/img/kafka-reassignment/img_1.png" alt="/img/kafka-reassignment/img_1.png"><img src="/img/kafka-reassignment/img_2.png" alt="/img/kafka-reassignment/img_2.png"><img src="/img/kafka-reassignment/img_3.png" alt="/img/kafka-reassignment/img_3.png"></li></ul></li></ul><h4 id="2-2新副本加入isr逻辑"><a href="#2-2新副本加入isr逻辑" class="headerlink" title="2.2新副本加入isr逻辑"></a>2.2新副本加入isr逻辑</h4><pre><code class="hljs">  副本同步&amp;加入isr逻辑涉及的几个类：  AbstractFetcherManager：同步线程管理的抽象类  ReplicaFetcherManager：同步线程管理，由此创建同步线程  ReplicaAlterLogDirsManager：本地拉取线程管理  AbstractFetcherThread：同步线程的抽象类，包含主体逻辑，抽象了部分方法  ReplicaFetcherThread：同步线程的实现类  ReplicaAlterLogDirsThread：本地拉取线程</code></pre><h5 id="开启同步线程"><a href="#开启同步线程" class="headerlink" title="开启同步线程"></a>开启同步线程</h5><p>在2.1中涉及到新副本接收到ApiKeys.LEADER_AND_ISR请求后，开启同步线程。<br>首先在副本接收到ApiKeys.LEADER_AND_ISR请求后，在KafkaApis#handleLeaderAndIsrRequest方法中处理请求，并在方法中调用了ReplicaManager#becomeLeaderOrFollower执行具体逻辑，在becomeLeaderOrFollower逻辑中，makeFollowers-&gt;AbstractFetcherManager#addFetcherForPartitions开始了副本同步线程。<br><img src="/img/kafka-reassignment/img_4.png" alt="/img/kafka-reassignment/img_4.png"><br><img src="/img/kafka-reassignment/img_5.png" alt="/img/kafka-reassignment/img_5.png"></p><h5 id="副本同步"><a href="#副本同步" class="headerlink" title="副本同步"></a>副本同步</h5><p>在第一步创建同步线程中具体的线程类是ReplicaFetcherThread（继承自AbstractFetcherThread）。线程start后，循环执行AbstractFetcherThread#doWork方法。doWork往下追踪：doWork-&gt;maybeFetch-&gt;processFetchRequest-&gt;fetchFromLeader。</p><ul><li>fetchFromLeader从leader中拉取消息</li><li>processPartitionData将消息写入日志段中，并更新高水位<br><img src="/img/kafka-reassignment/img_6.png" alt="/img/kafka-reassignment/img_6.png"><br><img src="/img/kafka-reassignment/img_7.png" alt="/img/kafka-reassignment/img_7.png"></li></ul><h5 id="加入isr"><a href="#加入isr" class="headerlink" title="加入isr"></a>加入isr</h5><p>  在第1步的becomeLeaderOrFollower逻辑中，除了创建ReplicaFetcherThread线程，另外通过ReplicaAlterLogDirsManager创建了ReplicaAlterLogDirsThread线程，这个线程启动后会开始持续拉取本地的消息，并判断是否需要加入isr。<br>  加入isr的逻辑链（对应下图2-8～2-12）：<br>  ReplicaAlterLogDirsThread#fetchFromLeader-&gt;ReplicaManager#fetchMessages-&gt;ReplicaManager#updateFollowerFetchState-&gt;Partition#updateFollowerFetchState-&gt;Partition#maybeExpandIsr<br>  <img src="/img/kafka-reassignment/img_8.png" alt="/img/kafka-reassignment/img_8.png"><img src="/img/kafka-reassignment/img_9.png" alt="/img/kafka-reassignment/img_9.png"><img src="/img/kafka-reassignment/img_10.png" alt="/img/kafka-reassignment/img_10.png"><img src="/img/kafka-reassignment/img_11.png" alt="/img/kafka-reassignment/img_11.png"><img src="/img/kafka-reassignment/img_12.png" alt="/img/kafka-reassignment/img_12.png"></p><h4 id="2-3-迁移后的选举逻辑"><a href="#2-3-迁移后的选举逻辑" class="headerlink" title="2.3 迁移后的选举逻辑"></a>2.3 迁移后的选举逻辑</h4><h5 id="zk节点监听注册"><a href="#zk节点监听注册" class="headerlink" title="zk节点监听注册"></a>zk节点监听注册</h5><p>  在副本加入isr后，会讲分区状态写入zk，当controller接收到zk节点信息变更后，执行迁移的后续动作。<br>  首先controller在切换或启动时，会注册zk节点监听。当监听到变更时，会发布IsrChangeNotificationHandler事件，通过异步的方式处理后续逻辑<br>  <img src="/img/kafka-reassignment/img_13.png" alt="/img/kafka-reassignment/img_13.png"><br>  <img src="/img/kafka-reassignment/img_14.png" alt="/img/kafka-reassignment/img_14.png"></p><h5 id="isr变更，leader副本选举"><a href="#isr变更，leader副本选举" class="headerlink" title="isr变更，leader副本选举"></a>isr变更，leader副本选举</h5><p>  前文介绍到这部分动作包括了上线新副本、选举新leader、删除和下限旧副本，在这我们探讨一下选举的逻辑。<br>  首先在controller接收到IsrChangeNotificationHandler事件后，经过processIsrChangeNotification-&gt;maybeCompleteReassignment-&gt;onPartitionReassignment进入到下图2-14逻辑，该逻辑为副本迁移的重要方法。<br>  其中会调用到moveReassignedPartitionLeaderIfRequired，该方法负责处理迁移后的选举相关逻辑，方法逻辑中主要包含三个分支：</p><ul><li>若当前leader已不再副本列表，执行选举</li><li>若当前leader仍在副本列表且可用，更新leader的代数即可</li><li>若当前leader仍在副本列表但不可用，执行选举<br><img src="/img/kafka-reassignment/img_15.png" alt="/img/kafka-reassignment/img_15.png"><img src="/img/kafka-reassignment/img_16.png" alt="/img/kafka-reassignment/img_16.png"></li></ul><h3 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>  Q：宕机是否影响迁移进度<br>  A：宕机重启后，自动恢复拉取线程，若宕机时间过长，可能导致读取冷数据影响leader性能<br>  Q：当大量副本同时完成迁移，并触发选举，是否会存在性能问题<br>  A：不存在controller性能问题，可能达到zk写瓶颈：</p><ul><li>controller通过zk监听的方式触发，因此zk的写瓶颈大于controller处理瓶颈，且controller是异步单线程串行</li><li>当controller触发了大量的选举后，同时会有大量的写zk动作（同步）+网络请求（异步）<br>Q：当拉取副本不存在的offset<br>A：当前开源版本拉取到不存在的offset时，抛出OffsetOutOfRangeException异常（代码位置：Partition.scala#readRecords，1119行）。后续增加了平滑扩容功能，需要考虑修改逻辑来支持fetch转发到能拉取到消息的副本</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
